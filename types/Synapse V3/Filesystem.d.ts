// noinspection JSUnusedGlobalSymbols

/**
 * Reads a file from the workspace folder.
 */
declare function readfile(path: string): string;
/**
 * Reads a file from the workspace folder asynchronously.
 */
declare function readfileasync(path: string): string;
/**
 * Writes to a file in the workspace folder.
 */
declare function writefile(path: string, contents: string): void;
/**
 * Writes to a file in the workspace folder asynchronously.
 */
declare function writefileasync(path: string, contents: string): void;
/**
 * Appends to a file in the workspace folder.
 */
declare function appendfile(path: string, contents: string): void;
/**
 * Appends to a file in the workspace folder asynchronously.
 */
declare function appendfileasync(path: string, contents: string): void;
/**
 * Equivalent to `loadstring(readfile(path))`.
 */
declare function loadfile(path: string, contents?: string): LuaTuple<[Callback?, string?]>;
/**
 * Equivalent to loadstring(readfileasync(path)).
 */
declare function loadfileasync(path: string, contents?: string): LuaTuple<[Callback?, string?]>;
/**
 * Returns an array of file names belonging to folder.
 */
declare function listfiles(folder?: string): string[];
/**
 * Returns `true` if path refers to a file.
 */
declare function isfile(path: string): boolean;
/**
 * Returns `true` if path refers to a folder.
 */
declare function isfolder(path: string): boolean;
/**
 * Recursively creates directories. Returns true on success.
 */
declare function makefolder(path: string): boolean;
/**
 * Deletes a folder.
 */
declare function delfolder(path: string): void;
/**
 * Deletes a file.
 */
declare function delfile(path: string): void;
/**
 * Returns a `Content` string that can be used with GUI elements, sounds, meshes, etc. to refer to an asset in the workspace folder.
 * @remarks Certain assets only work with certain file types. For example, VideoFrames only work with .webm encoded videos.
 */
declare function getsynasset(path: string): string;
type saveOptions = { FileName?: string; IgnoreArchivable?: boolean; SavePlayerCharacters?: boolean; SavePlayers?: boolean; DisableCompression?: boolean; Decompile?: boolean; DecompileJobless?: boolean; SaveNonCreatable?: boolean; NilInstances?: boolean; CopyToClipboard?: boolean; IgnoreList?: Instance[] };
/**
 * Saves an instance in binary (.rbxl or .rbxm) format. The following options can be passed:
 * |Option              |Description                                                                    |Default|
 * |:------------------:|:-----------------------------------------------------------------------------:|:-----:|
 * |FileName            |Output file                                                                    |Varies |
 * |IgnoreArchivable    |Ignores the `Archivable` property                                              |false  |
 * |SavePlayerCharacters|Includes player characters                                                     |false  |
 * |SavePlayers         |Includes `Player` objects and their descendants                                |false  |
 * |DisableCompression  |Disables compression in the binary output                                      |false  |
 * |Decompile           |Starts a batch decompiler job for all relevant scripts and includes the results|false  |
 * |DecompileJobless    |Includes already decompiled code in the output. No new scripts are decompiled. |false  |
 * |SaveNonCreatable    |Includes non-creatable instances as `Folder` objects                           |false  |
 * |NilInstances        |Includes nil instances                                                         |false  |
 * |CopyToClipboard     |If true, copies the result to clipboard instead of writing to disk             |false  |
 * |IgnoreList          |A list of instances (and their descendants) to ignore                          |{}     |
 */
declare function saveinstance(instance: Instance | Instance[], options?: saveOptions): boolean;
/**
 * Equivalent to {@link saveinstance}(game, options).
 */
declare function saveplace(options?: saveOptions): boolean;
