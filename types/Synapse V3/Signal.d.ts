// noinspection JSUnusedGlobalSymbols

/** Returns a script signal's connections. NOTE: Some events, such as `UserInputService`'s InputBegan, actually consist of different signals internally for different security contexts. By default, `getconnections` returns the connections of all signals. */
declare function getconnections(signal: RBXScriptSignal, context?: number): RBXScriptConnection[];
/** Fires a signal's Lua connections (excluding CoreScript connections). Roughly equivalent to
 * ```lua
 * for i, v in pairs(getconnections(signal)) do
 *    local f = v.Function
 *    if f then
 *        task.spawn(f, ...)
 *    end
 * end
 * ``` */
declare function firesignal(signal: RBXScriptSignal, ...any: unknown[]): void;
/** Fires a signal, including all engine (C) and CoreScript connections. This function cannot be called on "pseudo" signals such as those returned by `GetPropertyChangedSignal`. Passed values must be of the [correct type]{@link getsignalarguments}. */
declare function cfiresignal(signal: RBXScriptSignal, ...any: unknown[]): void;
/** Fires a signal on the server. Signal must be [replicable]{@link cansignalreplicate}. */
declare function replicatesignal(signal: RBXScriptSignal, ...any: unknown[]): void;
/** Returns true if a signal can be replicated to the server (see {@link replicatesignal}). */
declare function cansignalreplicate(signal: RBXScriptSignal): boolean;
/** Returns a table of a signal's arguments' types. For example, passing `Instance.AncestryChanged` would return `{ "Instance", "Instance "}`. */
declare function getsignalarguments(signal: RBXScriptSignal): object;
/** Returns true if a connection is enabled. */
declare function isconnectionenabled(connections: RBXScriptConnection): boolean;
/** Enables or disables a connection. Disabled connections remain connected, but do nothing when fired. */
declare function setconnectionenabled(connection: RBXScriptConnection, enable: boolean): void;
/** Returns true if `connection` represents a Lua connection. */
declare function isluaconnection(connection: RBXScriptConnection): boolean;
/** Returns true if `connection` is the result of a :`Wait()` call. */
declare function iswaitingconnection(connection: RBXScriptConnection): boolean;
/** Returns a connection's associated function. The connection must be a non-waiting Lua connection.
 *
 * **NOTE**; Arbitrary values can be passed to `.Connect`. In order to prevent accidental mishaps, this function will, by default, filter out any connected value that is not a function or a table with a `__call` metamethod. If `.Connect` was passed table with a `__call` metamethod, the returned value will be the value of that metamethod, or nil if that value is not a function.
 *
 * The optional second parameter will disable this behavior, and will just return whatever was passed to .Connect.
 */
declare function getconnectionfunction(connection: RBXScriptConnection, return_raw?: boolean): unknown;
/** Returns a connection's associated thread. The connection must be a Lua connection. */
declare function getconnectionthread(connection: RBXScriptConnection): thread;
/** Returns true if `connection` represents a Lua connection created by game scripts (as opposed to core scripts). */
declare function isgamescriptconnection(connection: RBXScriptConnection): boolean;
