// noinspection JSUnusedGlobalSymbols

/** Returns true if the game window is in focus. */
declare function iswindowactive(): boolean;
/** Focuses and locks the game window. While locked, focus changes and input by the user are not seen by the game. Input can still be sent with the input API. */
declare function lockwindow(): void;
/** Unlocks the game window. */
declare function unlockwindow(): void;
/** Returns true if the game window is locked. */
declare function iswindowlocked(): boolean;
/** Simulates a key press for the specified KeyCode. */
declare function keypress(key: Enum.KeyCode): void;
/** Simulates a key press for the specified [virtual key-code](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes). */
declare function keypress(key: number): void;
/** Simulates a key release for the specified KeyCode. */
declare function keyrelease(key: Enum.KeyCode): void;
/** Simulates a key release for the specified [virtual key-code](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes). */
declare function keyrelease(key: number): void;
/** Simulates an instant key press + release for the specified KeyCode. */
declare function keyclick(key: Enum.KeyCode): void;
/** Simulates a left mouse button press at the specified coordinates. */
declare function mouse1press(x: number, y: number): void;
/** Simulates a left mouse button press at the current mouse position. */
declare function mouse1press(): void;
/** Simulates a left mouse button release at the specified coordinates. */
declare function mouse1release(x: number, y: number): void;
/** Simulates a left mouse button release at the current mouse position. */
declare function mouse1release(): void;
/** Simulates a left mouse click at the current mouse position. */
declare function mouse1click(): void;
/** Simulates a right mouse button press at the specified coordinates. */
declare function mouse2press(x: number, y: number): void;
/** Simulates a right mouse button press at the current mouse position. */
declare function mouse2press(): void;
/** Simulates a right mouse button release at the specified coordinates. */
declare function mouse2release(x: number, y: number): void;
/** Simulates a right mouse button release at the current mouse position. */
declare function mouse2release(): void;
/** Simulates a right mouse click at the current mouse position. */
declare function mouse2click(): void;
/** Simulates a scroll forward or backward at the specified coordinates. */
declare function mousescroll(forward: boolean, x: number, y: number): void;
/** Simulates a scroll forward or backward at the current mouse position. */
declare function mousescroll(forward: boolean): void;
/** Moves the mouse relative to its current position. If provided, internal specifies whether a mouse movement event is signalled internally or your physical mouse cursor is moved. If not provided, internal is implied to be true if the game window is locked OR not active and false if otherwise. A physical mouse movement cannot occur when the game window is not in focus. */
declare function mousemoverel(x: number, y: number, internal?: boolean): void;
/** Moves the mouse to the specified coordinates. If provided, internal specifies whether a mouse movement event is signalled internally or your physical mouse cursor is moved. If not provided, internal is implied to be true if the game window is locked OR not active and false if otherwise. A physical mouse movement cannot occur when the game window is not in focus. */
declare function mousemoveabs(x: number, y: number, internal?: boolean): void;
/** Returns true if the specified [virtual key-code](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes) is pressed and the game window is in focus and not locked. */
declare function iskeydown(key: number): boolean;
/** Returns true if the specified [virtual key-code](https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes) is toggled (e.g. caps lock) and the game window is in focus and not locked. */
declare function iskeytoggled(key: number): boolean;
/** Returns true if the internal UI cursor is enabled. */
declare function getmousestate(): boolean;
/** Enables or disables the internal UI cursor. */
declare function setmousestate(new_state: boolean): void;
