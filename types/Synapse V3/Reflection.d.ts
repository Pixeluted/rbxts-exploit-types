// noinspection JSUnusedGlobalSymbols

/** Sets a property's `scriptable` flag. Non-scriptable properties cannot be accessed from Lua. Returns the flag's original state. NOTE: Take care using this function as changes done also affect game scripts, introducing the possibility of creating detection vectors or breaking existing code. */
declare function setscriptable(instance: Instance, property_name: string, scriptable: boolean): boolean;
/** Safely reads a non-scriptable property value, including those of type `BinaryString` and `SharedString`. */
declare function gethiddenproperty(instance: Instance, property_name: string): unknown;
/** Safely sets a non-scriptable property value. */
declare function sethiddenproperty(instance: Instance, property_name: string, value: unknown): void;
/** Returns a dictionary of all property values, including any non-scriptable, for `instance`. */
declare function getproperties(instance: Instance): Record<string, unknown>;
/** Returns a dictionary of all non-scriptable property values for `instance`. */
declare function gethiddenproperties(instance: Instance): Record<string, unknown>;
/** Returns a `TriangleMeshPart`'s `PhysicalConfigData` property. */
declare function getpcdprop(instance: TriangleMeshPart): LuaTuple<[string, string]>;
/** Returns the value of a callback property, such as `RemoteFunction.OnClientInvoke`. **NOTE**; Arbitrary values can be passed here. See the documentation for `getconnectionfunction` for more information about this and what `return_raw` does. */
declare function getcallbackmember(instance: Instance, property: string, return_raw?: boolean): unknown;
/** Creates an unrestricted signal object for any event in `instance`. Useful for connecting to conventionally non-scriptable signals. */
declare function geteventmember(instance: Instance, event_name: string): RBXScriptSignal;
/** Returns all callbacks bound with `RunService:BindToRenderStep`. */
declare function getrendersteppedlist(): Callback[];
